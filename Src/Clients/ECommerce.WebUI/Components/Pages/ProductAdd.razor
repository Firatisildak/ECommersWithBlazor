@page "/addProduct"
@attribute [StreamRendering]
@using System.ComponentModel.DataAnnotations
@using ECommerce.WebUI.Components.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Class="pa-6" Elevation="10">
        <MudText Typo="Typo.h5" Class="mb-4 text-primary">Yeni Ürün Ekle</MudText>

        <MudForm @ref="form">
            <MudTextField @bind-Value="newProduct.Name"
                          Label="Ürün Adı"
                          For="@(() => newProduct.Name)"
                          Required="true"
                          RequiredError="Ürün adı zorunludur." />

            <MudNumericField @bind-Value="newProduct.Stock"
                             Label="Stok Miktarı"
                             For="@(() => newProduct.Stock)"
                             Required="true"
                             RequiredError="Stok miktarı giriniz." />

            <MudNumericField T="float"
                             @bind-Value="newProduct.Price"
                             Label="Fiyat (₺)"
                             For="@(() => newProduct.Price)"
                             Required="true"
                             RequiredError="Fiyat giriniz."
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.AttachMoney" />

            <MudText Typo="Typo.body1" Class="mt-4">Ürün Fotoğrafı</MudText>
            <InputFile OnChange="OnFileSelected" accept="image/*" />

            @if (selectedFile != null)
            {
                <MudText Typo="Typo.caption">Seçilen: @selectedFile.Name</MudText>
            }

            <MudStack Direction="Row" Justify="Justify.SpaceBetween" Class="mt-5">
                <MudButton OnClick="Cancel"
                           Variant="Variant.Outlined"
                           Color="Color.Secondary">
                    İptal
                </MudButton>

                <MudButton OnClick="AddProductInfo"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    Ürünü Ekle
                </MudButton>
            </MudStack>
        </MudForm>
    </MudPaper>
</MudContainer>

<MudSnackbarProvider />

@code {
    private Product newProduct = new();
    private MudForm? form;
    private IBrowserFile? selectedFile;

    protected override void OnInitialized()
    {
        newProduct.Id = Guid.NewGuid();
        newProduct.CreatedDate = DateTime.Now;
        newProduct.UpdatedDate = DateTime.Now;
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task AddProductInfo()
    {
        await form!.Validate();

        if (!form.IsValid)
            return;

        newProduct.UpdatedDate = DateTime.Now;

        // 1. Ürünü ekle
        var response = await Http.PostAsJsonAsync("https://localhost:7141/api/Products", newProduct);
        if (!response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ürün eklenirken hata oluştu.");
            return;
        }

        // API CreateProduct endpoint'in dönüşünde Product Id yoksa
        // burada newProduct.Id'yi kullanıyoruz (Guid zaten client'ta oluşturulmuş)
        if (selectedFile != null)
        {
            // 2. Fotoğrafı yükle
            using var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(selectedFile.OpenReadStream(5 * 1024 * 1024)); // max 5 MB
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(streamContent, "Files", selectedFile.Name);

            var uploadResponse = await Http.PostAsync($"https://localhost:7141/api/Products/Upload?Id={newProduct.Id}", content);

            if (!uploadResponse.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Ürün eklendi ancak fotoğraf yüklenemedi.");
                return;
            }
        }

        await JSRuntime.InvokeVoidAsync("alert", "Ürün ve fotoğraf başarıyla eklendi!");
        NavigationManager.NavigateTo("/");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    // UI'da kullandığımız Product modeli
    public class Product
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Stock { get; set; }
        public float Price { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime UpdatedDate { get; set; }
    }
}
