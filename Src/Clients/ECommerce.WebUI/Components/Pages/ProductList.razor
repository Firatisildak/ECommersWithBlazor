@page "/"
@attribute [StreamRendering]
@using ECommerce.WebUI.Components.Models
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.False" Class="mt-6">
    <MudGrid Gutter="Size.Small">
        @if (productList == null)
        {
            <MudItem xs="12" class="d-flex justify-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate Size="Size.Large" />
            </MudItem>
        }
        else if (!productList.Any())
        {
            <MudItem xs="12" class="text-center">
                <MudAlert Severity="Severity.Info" Elevation="4" Dense Class="mt-4">
                    Ürün bulunamadı.
                </MudAlert>
            </MudItem>
        }
        else
        {
            @foreach (var product in productList)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudPaper Class="hover-glow animate__animated animate__fadeInUp" Elevation="10">
                        <MudCard Style="height: 100%;">
                            <MudCardMedia Image="/images/default-product.jpg" Height="160" Style="object-fit: cover;" />
                            <MudCardContent>
                                <MudText Typo="Typo.h6" Class="mb-1 text-primary font-bold">@product.Name</MudText>
                                <MudText Typo="Typo.subtitle1" Color="Color.Success">
                                    ₺@product.Price
                                </MudText>
                                <MudChip T="string" Color="Color.Info" Variant="Variant.Filled" Class="mt-2">
                                    Stok: @product.Stock
                                </MudChip>

                                <MudText Typo="Typo.caption" Class="text-secondary mt-1 d-block">
                                    Güncelleme: @product.UpdatedDate:dd.MM.yyyy
                                </MudText>
                            </MudCardContent>
                            <MudCardActions Class="d-flex justify-between px-3 pb-3">
                                <MudTooltip Text="Sepete Ekle">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddShoppingCart" Size="Size.Small" OnClick="() => AddToCart(product)">
                                        Ekle
                                    </MudButton>
                                </MudTooltip>
                                <MudTooltip Text="Ürünü Sil">
                                    <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteProduct(product)">
                                        Sil
                                    </MudButton>
                                </MudTooltip>
                            </MudCardActions>
                        </MudCard>
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

<MudSnackbarProvider />

@code {
    private Product[]? productList;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // Yükleme animasyonu için gecikme
        await LoadProductData();
    }

    private async Task LoadProductData()
    {
        var response = await Http.GetFromJsonAsync<GetAllProductsResponse>("https://localhost:7141/api/Products");
        productList = response?.Products?.ToArray();
    }

    private void AddToCart(Product product)
    {
        Snackbar.Add($"{product.Name} sepete eklendi!", Severity.Success);
    }

    private void DeleteProduct(Product product)
    {
        Snackbar.Add($"{product.Name} silindi.", Severity.Error);
    }

    [Inject] ISnackbar Snackbar { get; set; } = default!;
}
