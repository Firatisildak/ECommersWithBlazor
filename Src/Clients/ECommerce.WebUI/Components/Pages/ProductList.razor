@page "/"
@using ECommerce.WebUI.Components.Models
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.False" Class="mt-6">
    <MudGrid Gutter="Size.Small">
        @if (productList == null)
        {
            <MudItem xs="12" class="d-flex justify-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate Size="Size.Large" />
            </MudItem>
        }
        else if (!productList.Any())
        {
            <MudItem xs="12" class="text-center">
                <MudAlert Severity="Severity.Info" Elevation="4" Dense Class="mt-4">
                    Ürün bulunamadı.
                </MudAlert>
            </MudItem>
        }
        else
        {
            @foreach (var product in productList)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Style="height: 100%;">
                        <MudCardMedia Image="/images/default-product.jpg" Height="160" Style="object-fit: cover;" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-1 text-primary font-bold">@product.Name</MudText>
                            <MudText Typo="Typo.subtitle1" Color="Color.Success">
                                ₺@product.Price
                            </MudText>
                            <MudChip T="string" Color="Color.Info" Variant="Variant.Filled" Class="mt-2">
                                Stok: @product.Stock
                            </MudChip>
                            <MudText Typo="Typo.caption" Class="text-secondary mt-1 d-block">
                                Güncelleme: @(product.UpdatedDate.Year > 2000 ? product.UpdatedDate.ToString("dd.MM.yyyy") : "-")
                            </MudText>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-between px-3 pb-3">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddShoppingCart" Size="Size.Small" OnClick="() => AddToCart(product)">
                                Ekle
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteProduct(product)">
                                Sil
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }

        <!-- Pagination (manuel) -->
        <MudItem xs="12" class="d-flex justify-center mt-6 gap-3">
            <MudButton Variant="Variant.Outlined" Disabled="@(Page == 0)" OnClick="PrevPage">← Önceki</MudButton>
            <MudText Class="mt-2">Sayfa @(Page + 1)</MudText>
            <MudButton Variant="Variant.Filled" Disabled="@((Page + 1) * PageSize >= totalCount)" OnClick="NextPage">Sonraki →</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudSnackbarProvider />

@code {
    private Product[]? productList;
    private int Page = 0;
    private int PageSize = 8; // API örneğine göre
    private int totalCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductData();
    }

    private async Task LoadProductData()
    {
        var url = $"https://localhost:7141/api/Products?page={Page}&PageSize={PageSize}";
        Console.WriteLine($"API çağrısı: {url}");
        var response = await Http.GetFromJsonAsync<GetAllProductsResponse>(url);
        productList = response?.Products?.ToArray();
        totalCount = response?.TotalCount ?? 0;
    }

    private async Task PrevPage()
    {
        if (Page > 0)
        {
            Page--;
            await LoadProductData();
        }
    }

    private async Task NextPage()
    {
        if ((Page + 1) * PageSize < totalCount)
        {
            Page++;
            await LoadProductData();
        }
    }

    private void AddToCart(Product product)
    {
        Snackbar.Add($"{product.Name} sepete eklendi!", Severity.Success);
    }

    private void DeleteProduct(Product product)
    {
        Snackbar.Add($"{product.Name} silindi.", Severity.Error);
    }

}
